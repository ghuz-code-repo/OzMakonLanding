import { useCallback } from 'react';
import phoneConfigData from './phoneConfig.json';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞
const PHONE_CONFIG = phoneConfigData;
const COUNTRY_PHONE_CONFIG = phoneConfigData.countryPhoneConfig;
const COUNTRY_ISO_TO_PHONE_CODE = phoneConfigData.countryIsoToPhoneCode;
const DEFAULT_ALLOWED_CODES = phoneConfigData.allowedCountryCodes;
const DEFAULT_COUNTRY_CODE = phoneConfigData.defaultCountryCode;

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ RegExp –æ–±—ä–µ–∫—Ç—ã
Object.keys(COUNTRY_PHONE_CONFIG).forEach(code => {
  COUNTRY_PHONE_CONFIG[code].pattern = new RegExp(COUNTRY_PHONE_CONFIG[code].pattern);
});

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { PHONE_CONFIG, COUNTRY_PHONE_CONFIG, COUNTRY_ISO_TO_PHONE_CODE, DEFAULT_ALLOWED_CODES, DEFAULT_COUNTRY_CODE };

/**
 * –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
 * @param {string} phoneNumber - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function analyzeCountryCode(phoneNumber) {
  // console.log('üîç analyzeCountryCode called with:', phoneNumber);
  
  if (!phoneNumber) {
    return { status: 'empty', code: null, possibleCodes: [] };
  }
  
  const cleanNumber = phoneNumber.replace(/[^\d]/g, '');
  // console.log('üîç analyzeCountryCode: cleanNumber =', cleanNumber);
  
  if (!cleanNumber) {
    return { status: 'empty', code: null, possibleCodes: [] };
  }
  
  const allCodes = Object.keys(COUNTRY_PHONE_CONFIG);
  // console.log('üîç analyzeCountryCode: all available codes =', allCodes);
  
  // –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–ø–æ–ª–Ω—ã–µ –∫–æ–¥—ã)
  const exactMatches = allCodes.filter(code => cleanNumber.startsWith(code) && cleanNumber.length >= code.length);
  // console.log('üîç analyzeCountryCode: exact matches =', exactMatches);
  
  if (exactMatches.length > 0) {
    // –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –∫–æ–¥ - –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–¥–æ–≤)
    const foundCode = exactMatches.sort((a, b) => b.length - a.length)[0];
    // console.log('üîç analyzeCountryCode: EXACT CODE FOUND:', foundCode);
    return { 
      status: 'found', 
      code: foundCode, 
      possibleCodes: exactMatches,
      isAllowed: DEFAULT_ALLOWED_CODES.includes(foundCode)
    };
  }
  
  // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä)
  const partialMatches = allCodes.filter(code => code.startsWith(cleanNumber));
  // console.log('üîç analyzeCountryCode: partial matches =', partialMatches);
  
  if (partialMatches.length > 0) {
    // console.log('üîç analyzeCountryCode: PARTIAL MATCHES FOUND:', partialMatches);
    return { 
      status: 'partial', 
      code: null, 
      possibleCodes: partialMatches 
    };
  }
  
  // –ù–µ—Ç –Ω–∏ —Ç–æ—á–Ω—ã—Ö, –Ω–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∫–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
  // console.log('üîç analyzeCountryCode: NO POSSIBLE CODES - IMPOSSIBLE');
  return { 
    status: 'impossible', 
    code: cleanNumber, 
    possibleCodes: [] 
  };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
function detectCountryCode(phoneNumber) {
  // console.log('üîç detectCountryCode called with:', phoneNumber);
  
  if (!phoneNumber) {
    // console.log('üîç detectCountryCode: phoneNumber is empty, returning null');
    return null;
  }
  
  const analysis = analyzeCountryCode(phoneNumber);
  
  if (analysis.status === 'found') {
    // console.log('üîç detectCountryCode: returning found code:', analysis.code);
    return analysis.code;
  }
  
  // console.log('üîç detectCountryCode: no exact code found, returning null');
  return null;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * @param {string} countryCode - –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
 * @param {string} digits - —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã)
 * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
 */
function formatByMask(countryCode, digits) {
  const config = COUNTRY_PHONE_CONFIG[countryCode];
  if (!config || !config.format) {
    return `+${countryCode}${digits}`;
  }
  
  const format = config.format;
  // console.log(`üìû Formatting ${countryCode} with digits: "${digits}" using format: "${format}"`);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å–∫—É –ø–æ—Å–ª–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
  const maskParts = format.split(' ').slice(1); // —É–±–∏—Ä–∞–µ–º "+–∫–æ–¥"
  // console.log(`üìû Mask parts:`, maskParts);
  
  let result = `+${countryCode}`;
  let digitIndex = 0;
  
  for (const part of maskParts) {
    if (digitIndex >= digits.length) break;
    
    const partLength = part.length;
    const digitsPart = digits.substring(digitIndex, digitIndex + partLength);
    
    if (digitsPart) {
      result += ` ${digitsPart}`;
      digitIndex += partLength;
    }
  }
  
  // console.log(`üìû Result: "${result}"`);
  return result;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @param {string} inputValue - –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
 */
export function formatPhoneNumber(inputValue) {
  if (!inputValue) return '';
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
  let cleaned = inputValue.replace(/[^\d+]/g, '');
  
  // –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  if (!cleaned) {
    return '';
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –¥–æ–±–∞–≤–ª—è–µ–º
  if (!cleaned.startsWith('+')) {
    cleaned = '+' + cleaned;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
  const countryCode = detectCountryCode(cleaned);
  if (!countryCode) {
    return cleaned; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
  }

  const config = COUNTRY_PHONE_CONFIG[countryCode];
  if (!config) {
    return cleaned;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
  const digits = cleaned.substring(1); // —É–±–∏—Ä–∞–µ–º +
  const countryDigits = digits.substring(countryCode.length); // —É–±–∏—Ä–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
  
  // –û–±—Ä–µ–∑–∞–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
  const maxDigits = config.maxLength - countryCode.length - 1; // -1 –¥–ª—è +
  const truncatedDigits = countryDigits.substring(0, maxDigits);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –º–∞—Å–∫–µ
  return formatByMask(countryCode, truncatedDigits);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
 */
export function isCountryCodeAllowed(phoneNumber, allowedCodes = DEFAULT_ALLOWED_CODES) {
  const countryCode = detectCountryCode(phoneNumber);
  return countryCode ? allowedCodes.includes(countryCode) : false;
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export function validatePhoneNumber(phoneNumber, allowedCodes = DEFAULT_ALLOWED_CODES) {
  const formattedValue = formatPhoneNumber(phoneNumber);
  const detectedCode = detectCountryCode(formattedValue);
  const isValid = formattedValue ? isCountryCodeAllowed(formattedValue, allowedCodes) : false;
  const isComplete = formattedValue.length > (detectedCode?.length || 0) + 1;
  
  return {
    isValid,
    countryCode: detectedCode,
    value: formattedValue,
    isComplete
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –õ–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ IP,
 * –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
 * 
 * @param {string} currentCode - —Ç–µ–∫—É—â–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
 * @param {string[]} allowedCodes - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω
 * @param {boolean} enableGeolocation - –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
 * @returns {Promise<string>} –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
 */
export async function getOptimalCountryCode(currentCode = '', allowedCodes = DEFAULT_ALLOWED_CODES, enableGeolocation = true) {
  // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (currentCode && allowedCodes.includes(currentCode)) {
    return currentCode;
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
  if (enableGeolocation) {
    try {
      const userCountryCode = await getUserCountryByGeolocation();
      if (userCountryCode && allowedCodes.includes(userCountryCode)) {
        return userCountryCode;
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –∫–æ–¥
  return allowedCodes[0] || DEFAULT_COUNTRY_CODE;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ IP
 * @returns {Promise<string|null>} –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ null
 */
async function getUserCountryByGeolocation() {
  // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω—É —á–µ—Ä–µ–∑ IP
  try {
    const response = await fetch('https://ipapi.co/json/');
    if (response.ok) {
      const data = await response.json();
      const phoneCode = COUNTRY_ISO_TO_PHONE_CODE[data.country_code];
      if (phoneCode) {
        return phoneCode;
      }
    }
  } catch (error) {
    console.warn('IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error);
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä (–µ—Å–ª–∏ IP –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
  if (navigator.geolocation) {
    try {
      const position = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject, {
          timeout: 5000,
          enableHighAccuracy: false
        });
      });

      const { latitude, longitude } = position.coords;

      // –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤
      const geocodeServices = [
        `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`,
        `https://geocode.xyz/${latitude},${longitude}?json=1`
      ];

      for (const serviceUrl of geocodeServices) {
        try {
          const response = await fetch(serviceUrl);
          if (response.ok) {
            const data = await response.json();
            const countryCode = data.countryCode || data.country;
            const phoneCode = COUNTRY_ISO_TO_PHONE_CODE[countryCode];
            if (phoneCode) {
              return phoneCode;
            }
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ${serviceUrl}:`, error);
        }
      }
    } catch (error) {
      console.warn('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error);
    }
  }

  return null;
}

/**
 * –•—É–∫ —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
 * 
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * @param {string[]} config.allowedCountryCodes - —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {string} config.defaultCountryCode - –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é  
 * @param {boolean} config.enableGeolocation - –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
 * @param {boolean} config.showFullMaskPlaceholder - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –º–∞—Å–∫—É –≤ placeholder (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
 * @returns {Object} –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
 */
export function useSmartPhoneLogic(config = {}) {
  const {
    allowedCountryCodes = DEFAULT_ALLOWED_CODES,
    defaultCountryCode = DEFAULT_COUNTRY_CODE,
    enableGeolocation = true,
    showFullMaskPlaceholder = false
  } = config;

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @param {string} phone - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   * @returns {boolean} true –µ—Å–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω
   */
  const isCountryCodeAllowedCallback = useCallback((phone) => {
    return isCountryCodeAllowed(phone, allowedCountryCodes);
  }, [allowedCountryCodes]);

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
   * @param {string} value - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
   * @returns {boolean} true –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
   */
  const isOnlyCountryCode = useCallback((value) => {
    if (!value || value.trim() === '') return false;
    
    const cleaned = value.replace(/\s/g, ''); // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    const numbers = cleaned.replace(/[^\d+]/g, ''); // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ + –∏ —Ü–∏—Ñ—Ä—ã
    
    if (!numbers.startsWith('+')) return false;
    
    const digits = numbers.substring(1);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã
    const detectedCode = detectCountryCode(numbers);
    
    if (detectedCode) {
      // –ï—Å–ª–∏ –∫–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
      return digits.length === detectedCode.length;
    } else {
      // –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
      // –µ—Å–ª–∏ —Ü–∏—Ñ—Ä –æ—Ç 1 –¥–æ 4 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω 1-4 —Ü–∏—Ñ—Ä—ã)
      return digits.length >= 1 && digits.length <= 4;
    }
  }, []);

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π placeholder –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   * @returns {Promise<string>} –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π placeholder
   */
  const getOptimalPlaceholder = useCallback(async () => {
    const optimalCode = await getOptimalCountryCode('', allowedCountryCodes, enableGeolocation);
    
    return showFullMaskPlaceholder 
      ? (COUNTRY_PHONE_CONFIG[optimalCode]?.format || `+${optimalCode}`)
      : `+${optimalCode}`;
  }, [allowedCountryCodes, enableGeolocation, showFullMaskPlaceholder]);

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   * @param {string} phoneNumber - –Ω–æ–º–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  const validatePhoneNumberCallback = useCallback((phoneNumber) => {
    return validatePhoneNumber(phoneNumber, allowedCountryCodes);
  }, [allowedCountryCodes]);

  return {
    formatPhoneNumber,
    detectCountryCode,
    analyzeCountryCode,
    isCountryCodeAllowed: isCountryCodeAllowedCallback,
    isOnlyCountryCode,
    getOptimalPlaceholder,
    getOptimalCountryCode: (currentCode) => getOptimalCountryCode(currentCode, allowedCountryCodes, enableGeolocation),
    validatePhoneNumber: validatePhoneNumberCallback,
    COUNTRY_PHONE_CONFIG,
    COUNTRY_ISO_TO_PHONE_CODE,
    PHONE_CONFIG
  };
}
